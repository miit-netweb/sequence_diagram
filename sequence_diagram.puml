```plantuml
@startuml
participant V2EnrollmentController
participant AuthService
participant JwtServerProxy
participant PartnerServiceProxy
participant ThirdPartyEntityProxy
participant SubscriberRepository
participant PersonalDetailsRepository
participant BillingService
participant BillingPendingRepository
participant BillingProducer
participant EmailService
participant EmailPendingRepository
participant RabbitMQProducer

autonumber

V2EnrollmentController -> JwtServerProxy: validateToken(token)
activate JwtServerProxy
JwtServerProxy --> V2EnrollmentController: ResponseEntity<?> (partnerNumber)
deactivate JwtServerProxy

alt Token Validation Fails
    V2EnrollmentController --> V2EnrollmentController: throw UnAuthorizedUserException
else Token Validation Success & Partner Number Matches
    V2EnrollmentController -> AuthService: ValidateResponse(subscriber)
    activate AuthService
    alt Validation Fails
        AuthService --> V2EnrollmentController: throw ValidationException
    else Validation Success
        V2EnrollmentController -> PartnerServiceProxy: validatePartner(PartnerServiceDto, partnerNumber)
        activate PartnerServiceProxy
        PartnerServiceProxy --> V2EnrollmentController: ResponseEntity<SubscriptionData>
        deactivate PartnerServiceProxy
        alt Partner Validation Fails
            V2EnrollmentController --> V2EnrollmentController: throw ValidationException
        else Partner Validation Success
            V2EnrollmentController -> ThirdPartyEntityProxy: createCustomer(ThirdPartyEntityDto)
            activate ThirdPartyEntityProxy
            ThirdPartyEntityProxy --> V2EnrollmentController: ResponseEntity<Boolean> (success)
            deactivate ThirdPartyEntityProxy
            alt Third Party Creation Fails
                V2EnrollmentController --> V2EnrollmentController: throw ValidationException
            else Third Party Creation Success
                V2EnrollmentController -> AuthService: enrollNewSubscriber(subscriber, SUBSCRIBER_NUMBER)
                activate AuthService
                AuthService -> PersonalDetailsRepository: save(personalDetails)
                activate PersonalDetailsRepository
                PersonalDetailsRepository --> AuthService: PersonalDetails
                deactivate PersonalDetailsRepository
                AuthService -> SubscriberRepository: save(subscriber)
                activate SubscriberRepository
                SubscriberRepository --> AuthService: Subscriber
                deactivate SubscriberRepository
                AuthService --> V2EnrollmentController: Subscriber

                V2EnrollmentController -> BillingService: saveBillingPendingEntry(billingPending)
                activate BillingService
                BillingService -> BillingPendingRepository: save(billingPending)
                activate BillingPendingRepository
                BillingPendingRepository --> BillingService: BillingPending
                deactivate BillingPendingRepository
                BillingService --> V2EnrollmentController: BillingPending
                deactivate BillingService
                V2EnrollmentController -> BillingProducer: sendMessage(billingPending)
                activate BillingProducer

                V2EnrollmentController -> EmailService: addPendingEntry(emailPending)
                activate EmailService
                EmailService -> EmailPendingRepository: save(emailPending)
                activate EmailPendingRepository
                EmailPendingRepository --> EmailService: EmailPending
                deactivate EmailPendingRepository
                EmailService --> V2EnrollmentController: EmailPending
                deactivate EmailService
                V2EnrollmentController -> RabbitMQProducer: sendMessage(emailPending)
                activate RabbitMQProducer


                V2EnrollmentController --> V2EnrollmentController: ResponseEntity.ok("success")
                deactivate RabbitMQProducer
                deactivate BillingProducer
                deactivate AuthService
            end
        end
    end
end
deactivate V2EnrollmentController

@enduml
```

**Explanation of the Diagram:**

1.  **Components:** The diagram represents the core components involved in the enrollment process, including the controller, services, repositories, proxies to external services, and message producers.
2.  **Flow Initiation:** The `V2EnrollmentController` receives a request to enroll a subscriber.
3.  **Token Validation:** It first calls the `JwtServerProxy` to validate the provided token.
4.  **Authorization Check:** After token validation, extract partnerNumber from token and compare with user's partnerNumber.
5.  **Data Validation:**  If the token is valid and partner Number is matched, the `AuthService` validates the `SubscriberDto`.
6.  **Partner Validation:** Then, it calls the `PartnerServiceProxy` to validate the partner and subscription details.
7.  **Third-Party Integration:** Upon successful validation, the `ThirdPartyEntityProxy` is invoked to create a customer in an external system.
8.  **Data Persistence:** If the third-party creation is successful, the `AuthService` saves the subscriber details in the `SubscriberRepository` and `PersonalDetailsRepository`.
9.  **Asynchronous Tasks:** `BillingService`, `BillingProducer`, `EmailService`, and `RabbitMQProducer` are engaged in asynchronous operations for billing and email notifications.
10. **Error Handling:** The `alt` and `else` blocks represent conditional flows based on validation results, third-party creation status, and potential exceptions.
11. **Return Value:** The controller returns a success message if the enrollment process completes successfully.

**Key Flows:**

*   The diagram illustrates the sequence of operations performed during the enrollment process, including validation, external service calls, data persistence, and asynchronous tasks.
*   It highlights the dependencies between components and the flow of data between them.
*   The use of `alt` and `else` blocks clarifies the decision points and error-handling mechanisms in the system.
*   The asynchronous nature of billing and email notification is indicated by the use of `CompletableFuture.runAsync`.

