```plantuml
@startuml
'Participants
participant V2EnrollmentController
participant AuthService
participant JwtServerProxy
participant PartnerServiceProxy
participant ThirdPartyEntityProxy
participant SubscriberRepository
participant PersonalDetailsRepository
participant BillingService
participant BillingPendingRepository
participant BillingProducer
participant EmailService
participant EmailPendingRepository
participant RabbitMQProducer

'Sequence Flow
V2EnrollmentController -> JwtServerProxy: validateToken(token)
activate JwtServerProxy
JwtServerProxy --> V2EnrollmentController: ResponseEntity<?> (partnerNumber)
deactivate JwtServerProxy

alt Valid Token & Partner Number
    V2EnrollmentController -> AuthService: ValidateResponse(subscriber)
    activate AuthService
    alt Validation Success
        V2EnrollmentController -> PartnerServiceProxy: validatePartner(partnerServiceDto, partnerNumber)
        activate PartnerServiceProxy
        PartnerServiceProxy --> V2EnrollmentController: ResponseEntity<SubscriptionData> (subscriptionData)
        deactivate PartnerServiceProxy
        alt Subscription Data Valid
            V2EnrollmentController -> ThirdPartyEntityProxy: createCustomer(thirdPartyEntityDto)
            activate ThirdPartyEntityProxy
            ThirdPartyEntityProxy --> V2EnrollmentController: ResponseEntity<Boolean> (success)
            deactivate ThirdPartyEntityProxy
            alt Third Party Creation Success
                V2EnrollmentController -> AuthService: enrollNewSubscriber(subscriberDto, subscriberNumber)
                activate AuthService
                AuthService -> PersonalDetailsRepository: save(personalDetails)
                activate PersonalDetailsRepository
                PersonalDetailsRepository --> AuthService: PersonalDetails
                deactivate PersonalDetailsRepository
                AuthService -> SubscriberRepository: save(subscriber)
                activate SubscriberRepository
                SubscriberRepository --> AuthService: Subscriber
                deactivate SubscriberRepository
                deactivate AuthService

                V2EnrollmentController -> BillingService: saveBillingPendingEntry(billingPending)
                activate BillingService
                BillingService -> BillingPendingRepository: save(billingPending)
                activate BillingPendingRepository
                BillingPendingRepository --> BillingService: BillingPending
                deactivate BillingPendingRepository
                deactivate BillingService
                V2EnrollmentController -> BillingProducer: sendMessage(billingPending)
                activate BillingProducer
                BillingProducer --> V2EnrollmentController: void
                deactivate BillingProducer

                V2EnrollmentController -> EmailService: addPendingEntry(emailPending)
                activate EmailService
                EmailService -> EmailPendingRepository: save(emailPending)
                activate EmailPendingRepository
                EmailPendingRepository --> EmailService: EmailPending
                deactivate EmailPendingRepository
                deactivate EmailService
                V2EnrollmentController -> RabbitMQProducer: sendMessage(emailPending)
                activate RabbitMQProducer
                RabbitMQProducer --> V2EnrollmentController: void
                deactivate RabbitMQProducer

                V2EnrollmentController --> V2EnrollmentController: ResponseEntity.ok("success")
            else Third Party Creation Failure
                V2EnrollmentController --> V2EnrollmentController: ResponseEntity<ExceptionResponse> (ErrorCodes.SUBSCRIBER_CREATION_FAILED)
            end
        else Subscription Data Invalid
             V2EnrollmentController --> V2EnrollmentController: ResponseEntity<ExceptionResponse> (ErrorCodes.INVALID_PARTNER)
        end
    else Validation Failure
        V2EnrollmentController --> V2EnrollmentController: ResponseEntity<ExceptionResponse> (ErrorCodes.USER_VALIDATION_FAILED)
    end
else Invalid Token or Partner Number Mismatch
    V2EnrollmentController --> V2EnrollmentController: ResponseEntity<ExceptionResponse> (UnAuthorizedUserException)
end

@enduml
```

**Explanation of the Diagram:**

1.  **Components:** The diagram includes the key components of the Enrollment Service, such as the Controller (`V2EnrollmentController`), Services (`AuthService`, `BillingService`, `EmailService`), Repositories (`SubscriberRepository`, `PersonalDetailsRepository`, `BillingPendingRepository`, `EmailPendingRepository`), Kafka Producer (`BillingProducer`), RabbitMQ Producer (`RabbitMQProducer`), and Proxies for external services (`JwtServerProxy`, `PartnerServiceProxy`, `ThirdPartyEntityProxy`).

2.  **Workflow:**
    *   The `V2EnrollmentController` receives a new subscriber request (`addNewUser`).
    *   It first validates the JWT token via `JwtServerProxy.validateToken()`.
    *   If the token is valid and the partner number in the token matches the partner number in the request, it validates the subscriber data through the `AuthService.ValidateResponse()` method.
    *   Upon successful validation, it communicates with `PartnerServiceProxy.validatePartner()` to validate partner details.
    *   If partner validation is successful, it calls `ThirdPartyEntityProxy.createCustomer()` to create the customer in an external entity.
    *   After successful third-party customer creation, the core enrollment logic in `AuthService.enrollNewSubscriber()` is executed, which saves the `PersonalDetails` and `Subscriber` entities to their respective repositories (`PersonalDetailsRepository`, `SubscriberRepository`).
    *   Billing and Email services is called `BillingService.saveBillingPendingEntry()` and `RabbitMQProducer.sendMessage()` for message publishing respectively.
    *   Finally, the controller returns a success or failure response.

3.  **Data Flow:**
    *   The `SubscriberDto` contains subscriber data, which is passed between the controller and the `AuthService`.
    *   `PartnerServiceDto` and `SubscriptionData` is passed to the `PartnerServiceProxy`.
    *   The subscriber number is generated within the `AuthService`.
    *   `ThirdPartyEntityDto` is passed to `ThirdPartyEntityProxy`.
    *   `BillingPending` and `EmailPending` is passed to the respective services and queues.
    *   `PersonalDetails` and `Subscriber` entities are saved to the database.

4.  **Dependencies:** The diagram clearly shows the dependencies between the components, particularly the use of Proxies to interact with external services.

5.  **Error Handling:** Alternative flows are included to represent potential error scenarios, such as failed validations, invalid partner details, and failures during third-party customer creation.

6.  **Asynchronous Operations:** The asynchronous operations are saving billing details and sending an email.

7.  **Rate Limiting:** Controller is protected by `RateLimiter`.
